Thrift: The Missing Guide
=========================
Diwaker Gupta <me@diwakergupta.info>
{localdate}:
Written against Thrift 0.6.0

From the http://thrift.apache.org[Thrift website]:
[quote]
Thrift is a software framework for scalable cross-language services development.
It combines a software stack with a code generation engine to build services
that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby,
Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml.

Thrift is clearly abundant in features. What is sorely lacking though is _good_
documentation. This guide is an attempt to fill that hole. But note that this is
a reference guide -- for a step-by-step example on how to use Thrift, refer to
the Thrift tutorial.

Many aspects of the structure and organization of this guide have been borrowed
from the (excellent)
http://code.google.com/apis/protocolbuffers/docs/proto.html[Google Protocol
Buffer Language Guide]. I thank the authors of that document.

A link:thrift.pdf[PDF version] is also available.

.Copyright

Copyright (C) 2011 Diwaker Gupta

This work is licensed under the
http://creativecommons.org/licenses/by-nc/3.0/[Creative Commons
Attribution-NonCommercial 3.0
Unported License].

.Contributions

I welcome feedback and contributions to this guide. You can find the
https://github.com/diwakergupta/thrift-missing-guide[source code]
over at http://github.com[GitHub]. Alternatively, you can file a
https://github.com/diwakergupta/thrift-missing-guide/issues[bug].

.Acknowledgements

I thank the authors of Thrift for the software, the authors of the Google
Protocol Buffer documentation for the inspiration and the Thrift community for
the feedback. Special thanks to Dave Engberg from Evernote for his input.

.About the Author

I'm an open source geek and a software architect. I blog over at
http://floatingsun.net[Floating Sun] and you can find me
http://diwakergupta.info[here].

Language Reference
------------------
include::language-reference.asciidoc[]

Generated Code
--------------

This section contains documentation for working with Thrift generated code in
various target languages. We begin by introducing the common concepts that are
used across the board -- these govern how the generated code is structured and
will hopefully help you understand how to use it effectively.

Concepts
~~~~~~~~
include::code-concepts.asciidoc[]

Java
~~~~
include::code-java.asciidoc[]

C++
~~~
include::code-cpp.asciidoc[]


Other Languages
~~~~~~~~~~~~~~~

Python, Ruby, Javascript etc.

Best Practices
--------------

Versioning/Compatibility
~~~~~~~~~~~~~~~~~~~~~~~~

Protocols evolve over time. If an existing message type no longer meets all
your needs -- for example, you'd like the message format to have an extra field
-- but you'd still like to use code created with the old format, don't worry!
It's very simple to update message types without breaking any of your existing
code. Just remember the following rules:

* Don't change the numeric tags for any existing fields.
* Any new fields that you add should be optional. This means that any messages
  serialized by code using your "old" message format can be parsed by your new
  generated code, as they won't be missing any required elements. You should set
  up sensible default values for these elements so that new code can properly
  interact with messages generated by old code. Similarly, messages created by
  your new code can be parsed by your old code: old binaries simply ignore the
  new field when parsing. However, the unknown fields are not discarded, and if
  the message is later serialized, the unknown fields are serialized along with
  it -- so if the message is passed on to new code, the new fields are still
  available.
* Non-required fields can be removed, as long as the tag number is not used
  again in your updated message type (it may be better to rename the field
  instead, perhaps adding the prefix "OBSOLETE_", so that future users of your
  .thrift can't accidentally reuse the number).
* Changing a default value is generally OK, as long as you remember that default
  values are never sent over the wire. Thus, if a program receives a message in
  which a particular field isn't set, the program will see the default value as
  it was defined in that program's version of the protocol. It will NOT see the
  default value that was defined in the sender's code.

Resources
---------

* http://thrift.apache.org/static/thrift-20070401.pdf[Thrift whitepaper]
* http://wiki.apache.org/thrift/Tutorial[Thrift Tutorial]
* http://wiki.apache.org/thrift[Thrift Wiki]
* http://code.google.com/apis/protocolbuffers/docs/overview.html[Protocol
  Buffers]
