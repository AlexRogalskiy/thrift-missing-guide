Versioning/Compatibility
~~~~~~~~~~~~~~~~~~~~~~~~

Protocols evolve over time. If an existing message type no longer meets all
your needs -- for example, you'd like the message format to have an extra field
-- but you'd still like to use code created with the old format, don't worry!
It's very simple to update message types without breaking any of your existing
code. Just remember the following rules:

* Don't change the numeric tags for any existing fields.
* Any new fields that you add should be optional. This means that any messages
  serialized by code using your "old" message format can be parsed by your new
  generated code, as they won't be missing any required elements. You should set
  up sensible default values for these elements so that new code can properly
  interact with messages generated by old code. Similarly, messages created by
  your new code can be parsed by your old code: old binaries simply ignore the
  new field when parsing. However, the unknown fields are not discarded, and if
  the message is later serialized, the unknown fields are serialized along with
  it -- so if the message is passed on to new code, the new fields are still
  available.
* Non-required fields can be removed, as long as the tag number is not used
  again in your updated message type (it may be better to rename the field
  instead, perhaps adding the prefix "OBSOLETE_", so that future users of your
  .thrift can't accidentally reuse the number).
* Changing a default value is generally OK, as long as you remember that default
  values are never sent over the wire. Thus, if a program receives a message in
  which a particular field isn't set, the program will see the default value as
  it was defined in that program's version of the protocol. It will NOT see the
  default value that was defined in the sender's code.
